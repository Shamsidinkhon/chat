<?php

namespace Longman\TelegramBot\Commands\UserCommands;

use common\botHelpers\CommonHelper;
use common\models\BlockedUsers;
use common\models\BotUsersSearch;
use common\models\NewChats;
use Longman\TelegramBot\Commands\UserCommand;
use Longman\TelegramBot\Request;
use Yii;

class NewChatCommand extends UserCommand
{
    protected $name = 'newChat';                      // Your command's name
    protected $description = 'A command for New Chat'; // Your command description
    protected $usage = '/newChat';                    // Usage of your command
    protected $version = '1.0.0';                  // Version of your command

    public function execute()
    {
        $message = $this->getMessage();            // Get Message object

        $chat_id = $message->getChat()->getId();   // Get the current Chat ID

        $user = BotUsersSearch::findOne(['chat_id' => $chat_id]);
        $text = Yii::t('main', 'Not found new user');
        if ($user) {
            if($user->current_partner_id){
                $model = BotUsersSearch::findOne(['chat_id' => $user->current_partner_id]);
                if($model){
                    $model->current_partner_id = null;
                    $model->save();
                    $data = [                                  // Set up the new message data
                        'chat_id' => $model->chat_id,                 // Set Chat ID to send the message to
                        'text' =>  Yii::t('main', 'Your conversation partner has left'),
                    ];
                    Request::sendMessage($data);
                }
            }
            $gender = $user->gender == 'm' ? 'f' : 'm';
            $blockedUsers = BlockedUsers::find()->select('blocked_chat_id')->andWhere(['chat_id' => $chat_id])->column();
            $partner = NewChats::find()
                ->andWhere(['gender' => $gender])
                ->andWhere(['not in', 'chat_id', $blockedUsers])
                ->orderBy(['id' => SORT_ASC])->one();
            if ($partner) {
                NewChats::deleteAll(['chat_id' => $partner->chat_id]);
                $user->current_partner_id = $partner->chat_id;
                $pUser = BotUsersSearch::findOne(['chat_id' => $user->current_partner_id]);
                $pUser->current_partner_id = $user->chat_id;
                $pUser->save();
                $text = Yii::t('main', 'New conversation partner');
                $data = [                                  // Set up the new message data
                    'chat_id' => $pUser->chat_id,                 // Set Chat ID to send the message to
                    'text' => $text,
                ];
                Request::sendMessage($data);
            } else {
                $user->current_partner_id = null;
                if (!NewChats::findOne(['chat_id' => $chat_id])) {
                    $model = new NewChats();
                    $model->chat_id = $chat_id;
                    $model->gender = $user->gender;
                    $model->save();
                }
            }
            $user->save();
        }

        $data = [                                  // Set up the new message data
            'chat_id' => $chat_id,                 // Set Chat ID to send the message to
            'text' => $text,
        ];

        return Request::sendMessage($data);        // Send message!
    }

    public function preExecute()
    {
        CommonHelper::initialize($this->update);
        return parent::preExecute(); // TODO: Change the autogenerated stub
    }
}