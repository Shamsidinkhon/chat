<?php

namespace Longman\TelegramBot\Commands\UserCommands;

use common\botHelpers\CommonHelper;
use common\botHelpers\UserHelper;
use common\models\BotUsersSearch;
use Longman\TelegramBot\Commands\UserCommand;
use Longman\TelegramBot\Entities\Keyboard;
use Longman\TelegramBot\Entities\KeyboardButton;
use Longman\TelegramBot\Request;
use Yii;

class SendTextToUserCommand extends UserCommand
{
    protected $name = 'SendTextToUser';                      // Your command's name
    protected $description = 'A command for SendTextToUser'; // Your command description
    protected $usage = '/SendTextToUser';                    // Usage of your command
    protected $version = '1.0.0';                  // Version of your command

    public function execute()
    {
        $message = $this->getMessage();            // Get Message object

        $chat_id = $message->getChat()->getId();   // Get the current Chat ID

        $user = BotUsersSearch::findOne(['chat_id' => $chat_id]);
        $prefix = Yii::t('main', 'Partner:') . PHP_EOL;
        $caption = Yii::t('main', 'Your partner sent') . PHP_EOL;
        if ($user) {
            if ($user->current_partner_id) {
                $type = $message->getType();
                $data = [
                    'chat_id' => $user->current_partner_id
                ];
                if ($type === 'text') {
                    CommonHelper::logConversation($user->chat_id, $user->current_partner_id, $message->getText());
                    $data['text'] = $prefix . $message->getText();
                    $type = 'message';
                } elseif ($type === 'audio') {
                    $data['audio'] = $message->getAudio()->getFileId();
                    $data['duration'] = $message->getAudio()->getDuration();
                    $data['performer'] = $message->getAudio()->getPerformer();
                    $data['title'] = $message->getAudio()->getTitle();
                    $data['caption'] = $caption;
                } elseif ($type === 'document') {
                    $data['document'] = $message->getDocument()->getFileId();
                    $data['caption'] = $caption;
                } elseif ($type === 'photo') {
                    $data['photo'] = $message->getPhoto()[0]->getFileId();
                    $data['caption'] = $caption;
                } elseif ($type === 'sticker') {
                    $data['sticker'] = $message->getSticker()->getFileId();
                } elseif ($type === 'video') {
                    $data['video'] = $message->getVideo()->getFileId();
                    $data['caption'] = $caption;
                } elseif ($type === 'voice') {
                    $data['voice'] = $message->getVoice()->getFileId();
                    $data['caption'] = $caption;
                } elseif ($type === 'location') {
                    $data['latitude'] = $message->getLocation()->getLatitude();
                    $data['longitude'] = $message->getLocation()->getLongitude();
                }
                return Request::send('send' . ucfirst($type), $data);
            }
        }
    }

    public function preExecute()
    {
        CommonHelper::initialize($this->update);
        return parent::preExecute(); // TODO: Change the autogenerated stub
    }
}